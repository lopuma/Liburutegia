<link rel="stylesheet" href="/style/singup.css">

<div class="Singup" id="stateRecord">
    <form class="Register" id="formRegister" name="formRegister">
        <div class="Register-content">
            <h1 class="Register-title">User Register</h1>
            <div class="Input-boxes">
                <!-- TODO EMAIL -->
                <div class="Input-box Box">
                    <i id="iconEmail" class="Box-i fa-solid fa-envelope"></i>
                    <div class="Box-animation Animation">
                        <input class="Animation-input" name="inputEmailNew" id="inputEmailNew" type="email"
                            placeholder=" " autocomplete="valorNoValido" required="required" tabindex="1" autofocus>
                        <label class="Animation-label" for="inputEmailNew">Enter your Email *</label>
                    </div>
                </div>
                <div class="Input-error Error" id="validationEmailNew">
                    <div class="Error-icon">
                        <svg fill="currentColor" focusable="false" width="16px" height="16px" viewBox="0 0 24 24"
                            xmlns="https://www.w3.org/2000/svg">
                            <path
                                d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z">
                            </path>
                        </svg>
                    </div>
                    <div class="Error-text">
                        <span id="errorEmailNew">Email cannot be empty.</span>
                    </div>
                </div>
                <!-- TODO USERNAME -->
                <div class="Input-box Box">
                    <i id="iconUserName" class="Box-i fa-solid fa-user"></i>
                    <div class="Box-animation Animation">
                        <input class="Animation-input" name="inputUsername" id="inputUsername" type="text"
                            placeholder=" " autocomplete="nickname" required="required" tabindex="2">
                        <label class="Animation-label" for="inputUsername">Enter your Username *</label>
                    </div>
                </div>
                <div class="Input-error Error" id="validationUserName">
                    <div class="Error-icon">
                        <svg fill="currentColor" focusable="false" width="16px" height="16px" viewBox="0 0 24 24"
                            xmlns="https://www.w3.org/2000/svg">
                            <path
                                d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z">
                            </path>
                        </svg>
                    </div>
                    <div class="Error-text">
                        <span id="errorUserName">Username cannot be empty.</span>
                    </div>
                </div>
                <!-- TODO FULL NAME -->
                <div class="Input-box Box">
                    <i id="iconFullName" class="Box-i fa-solid fa-user"></i>
                    <div class="Box-animation Animation">
                        <input class="Animation-input" id="inputFullName" type="text" name="inputFullName" tabindex="3"
                            placeholder=" " autocomplete="noValido" required="required">
                        <label class="Animation-label" for="inputFullName">Enter your Full Name *</label>
                    </div>
                </div>
                <div class="Input-error Error" id="validationFullName">
                    <div class="Error-icon">
                        <svg fill="currentColor" focusable="false" width="16px" height="16px" viewBox="0 0 24 24"
                            xmlns="https://www.w3.org/2000/svg">
                            <path
                                d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z">
                            </path>
                        </svg>
                    </div>
                    <div class="Error-text">
                        <span id="errorFullName">The field Fullanme cannot be empty.</span>
                    </div>
                </div>
                <!-- TODO NEW PASSWORD -->
                <div class="Input-box Box">
                    <i id="iconPassNew" class="Box-i fa-solid fa-key"></i>
                    <div class="Box-animation Animation">
                        <input class="Animation-input" name="inputPassNew" id="inputPassNew" type="password"
                            required="required" tabindex="4" placeholder=" " autocomplete="noValido">
                        <label for="inputPassNew" class="Animation-label">Create a password *</label>
                    </div>
                    <i id="icon-eye-rPassword" class="Box-i fa-solid fa-eye"></i>
                </div>
                <div class="Input-error Error" id="validationPassNew">
                    <div class="Error-icon">
                        <svg fill="currentColor" focusable="false" width="16px" height="16px" viewBox="0 0 24 24"
                            xmlns="https://www.w3.org/2000/svg">
                            <path
                                d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z">
                            </path>
                        </svg>
                    </div>
                    <div class="Error-text">
                        <span id="errorPassNew">Email cannot be empty.</span>
                    </div>
                </div>
                <!-- TODO REPEAT PASSWORD -->
                <div class="Input-box Box">
                    <i id="iconPassRepeat" class="Box-i fa-solid fa-key"></i>
                    <div class="Box-animation Animation">
                        <input class="Animation-input" name="inputPassNewRepeat" id="inputPassNewRepeat" type="password"
                            required="required" placeholder=" " autocomplete="noValido" tabindex="5">
                        <label for="inputPassNewRepeat" class="Animation-label">Repeat password *</label>
                    </div>
                    <i id="icon-eye-rRepeat" class="Box-i fa-solid fa-eye"></i>
                </div>
                <div class="Input-error Error" id="validationPassRepeat">
                    <div class="Error-icon">
                        <svg fill="currentColor" focusable="false" width="16px" height="16px" viewBox="0 0 24 24"
                            xmlns="https://www.w3.org/2000/svg">
                            <path
                                d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z">
                            </path>
                        </svg>
                    </div>
                    <div class="Error-text">
                        <span id="errorPassRepeat">Email cannot be empty.</span>
                    </div>
                </div>
            </div>
            <div class="Input-select">
                <label class="Select-label" for="rol">Select a Rol for User</label>
                <select id="rol" name="rol" class="Select-rol" tabindex="6">
                    <option class="Select-option" value="admin" selected>Admin</option>
                    <option class="Select-option" value="data entry">Data Entry</option>
                </select>
            </div>
            <div class="Input-button">
                <input class="Button-cancel" id="btnCancel" type="button" onclick="cancel();" value='CANCEL'
                    tabindex="7" />
                <input class="Button-accept" id="btnAccept" type="submit" value='ACCEPT' tabindex="8" />
            </div>
        </div>
    </form>
</div>

<script defer>
    const url = '/register';
    const inputPassNew = document.getElementById("inputPassNew");
    const inputPassNewRepeat = document.getElementById("inputPassNewRepeat");
    const btnAccept = document.getElementById("btnAccept");
    const btnCancel = document.getElementById("btnCancel");
    const btnShowPass = document.getElementById("icon-eye-rPassword");
    const btnShowPassRepeat = document.getElementById("icon-eye-rRepeat");
    const formRegister = document.getElementById("formRegister");
    const inputs = document.querySelectorAll("#formRegister input");
    const inputEmailNew = document.getElementById('inputEmailNew');
    let active = false;
    let activeRepeat = false;

    const fields = {
        email: false,
        username: false,
        fullname: false,
        pass: false
    }
    const expresiones = {
        nickname: /^[a-zA-Z0-9\_\-]{4,16}$/, // Letras, numeros, guion y guion_bajo
        fullname: /^[a-zA-ZÀ-ÿ\s]{4,40}$/, // Letras y espacios, pueden llevar acentos.
        password: /^.{5,20}$/, // 4 a 20 digitos.
        email: /^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$/,
        //phone: /^\d{7,14}$/ // 7 a 14 numeros.
    };

    const validarPassword = () => {
        if (inputPassNew.value !== inputPassNewRepeat.value) {
            console.log("no son iguales")
            document.getElementById('validationPassRepeat').classList.add('isActive');
            document.getElementById('errorPassRepeat').innerHTML = "Passwords do not match.";
            inputPassNewRepeat.classList.add('isError');
            fields['pass'] = false;
        } else {
            console.log("iguales")
            document.getElementById('validationPassRepeat').classList.remove('isActive');
            document.getElementById('errorPassRepeat').innerHTML = "";
            inputPassNewRepeat.classList.remove('isError');
            fields['pass'] = true;
        }
    }

    async function cancel() {
        window.location = '/workspace/admin'
    }

    async function responseRegister(data) {
        const exists = data.exists;
        if (!exists) {
            Swal.fire({
                icon: 'success',
                title: 'Success',
                text: data.message,
                backdrop: '#2C3333',
                timer: 5000,
                showCancelButton: false,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#474E68',
                confirmButtonText: 'OK',
                cancelButtonText: 'No',
                showClass: {
                    popup: 'animate__animated animate__fadeInDown'
                },
                hideClass: {
                    popup: 'animate__animated animate__fadeOutUp'
                }
            }).then((results) => {
                if (results.isConfirmed) {
                    formRegister.reset();
                    inputEmailNew.focus();
                }
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: data.message,
                backdrop: '#2C3333',
                timer: 5000,
                showCancelButton: false,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#474E68',
                confirmButtonText: 'OK',
                cancelButtonText: 'No',
                showClass: {
                    popup: 'animate__animated animate__fadeInDown'
                },
                hideClass: {
                    popup: 'animate__animated animate__fadeOutUp'
                }
            }).then((results) => {
                if (results.isConfirmed) {
                    inputEmailNew.focus();
                    inputEmailNew.select();
                }
            });
        }
    }

    async function validateField(expresion, input, fieldError, fieldErrorText, textError, field) {
        if (!expresion.test(input.value)) {
            document.getElementById(fieldError).classList.add('isActive');
            document.getElementById(fieldErrorText).innerHTML = textError;
            input.classList.add('isError');
            fields[field] = false;
        } else {
            document.getElementById(fieldError).classList.remove('isActive');
            document.getElementById(fieldErrorText).innerHTML = "";
            input.classList.remove('isError');
            fields[field] = true;
        }
    }

    async function fieldEmpty(expression, input, errorDivValidation, errorInputText, textEmailError, field) {
        if (input.value !== "") {
            await validateField(expression, input, errorDivValidation, errorInputText, textEmailError, field);
        } else {
            document.getElementById(errorDivValidation).classList.remove('isActive');
            document.getElementById(errorInputText).innerHTML = "";
            input.classList.remove('isError');
        }
        return;
    }

    const validateForms = async (e) => {
        switch (e.target.name) {
            case "inputEmailNew":
                let textEmailError = "Error: The format Email address is incorrect, the email can only contain letters, numbers, periods, hyphens and underscores.";
                await fieldEmpty(expresiones.email, e.target, 'validationEmailNew', 'errorEmailNew', textEmailError, 'email');
                break;
            case "inputUsername":
                let textErrorUsername = "Error: The username must be between 4 and 16 digits and can only contain numbers, letters, and underscores and cannot contain spaces.";
                await fieldEmpty(expresiones.nickname, e.target, 'validationUserName', 'errorUserName', textErrorUsername, 'username');
                break;
            case "inputFullName":
                let textErrorFullname = "Error: The Full Name must have from 4 to 40 digits and can contain letters, accents and spaces, it cannot contain special characters.";
                await fieldEmpty(expresiones.fullname, e.target, 'validationFullName', 'errorFullName', textErrorFullname, 'fullname');
                break;
            case "inputPassNew":
                let textErrorPassNew = "Error: The password does not meet the requirements of the password policy, it must be between 5 and 20 digits, it can contain letters, numbers and special characters.";
                await fieldEmpty(expresiones.password, e.target, 'validationPassNew', 'errorPassNew', textErrorPassNew, 'pass');
                validarPassword();
                break;
            case "inputPassNewRepeat":
                //let textErrorPassRepeat = "Error: The password does not meet the requirements of the password policy, it must be between 5 and 15 digits, it can contain letters, numbers and special characters.";
                //await fieldEmpty(expresiones.password, e.target, 'validationPassRepeat', 'errorPassRepeat', textErrorPassRepeat);
                validarPassword();
                break;
        }
    };

    inputs.forEach(input => {
        //input.addEventListener("keyup", validateForms);
        input.addEventListener("blur", validateForms);
    });

    //formRegister.addEventListener('submit', (e) => {
    //    e.preventDefault();
    //   console.log("ENVIADO")
    //});

    async function correctForms(e) {
        e.preventDefault();
        console.log("ENVIADO");
        if (fields.email && fields.username && fields.fullname && fields.pass) {
            const data = {
                email: document.getElementById("inputEmailNew").value,
                username: document.getElementById("inputUsername").value,
                fullname: document.getElementById("inputFullName").value,
                rol: document.getElementById("rol").value,
                pass: document.getElementById("inputPassNew").value
            };
            console.log({ data });
            fetch(url, {
                method: 'POST',
                body: JSON.stringify(data),
                headers: {
                    'Content-Type': 'application/json; charset=UTF-8'
                }

            })
                .then((response) => response.json())
                .then((data) => responseRegister(data))
                .catch((error) => console.error(error));
            //
        } else {
            console.log(" hay uno vacio ");
        }
    }

    document.addEventListener("DOMContentLoaded", function () {
        formRegister.addEventListener("submit", correctForms);
    });

</script>