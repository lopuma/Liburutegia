<link rel="stylesheet" href="/style/newForm.css">

<div class="New-content">

    <div class="New-boxes">
        <!-- TODO BOOK ID -->
        <div class="Input-box" hidden>
            <div class="Box">
                <i class="Box-i fa-solid fa-key"></i>
                <div class="Box-animation Animation">
                    <input class="Animation-input"  type="text" id="bookID" tabindex="0" readonly value="null">
                    <label class="Animation-label" for="bookID">Your Book ID</label>
                </div>
            </div>
        </div>
    </div>
    <div class="New-boxes">
        <!-- TODO NUM REFERENCE -->
        <div class="Input-box">
            <div class="Box">
                <i class="Box-i fa-solid fa-key"></i>
                <div class="Box-animation Animation">
                    <input class="Animation-input"  type="text" id="numReference" tabindex="1" placeholder=" " autocomplete="valorNoValido">
                    <label class="Animation-label" for="numReference">Num reference</label>
                </div>
            </div>
        </div>
        <div class="Input-box isInvisible"></div>
    </div>
    <div class="New-boxes">
        <!-- TODO PURCHASE DATE -->
        <div class="Input-box" id="inputBoxPurchaseDate">
            <div class="Box">
                <i class="fa-solid fa-calendar-days"></i>
                <div class="Box-animation Animation Creation-date" id="purchaseDate">
                    <input class="Animation-input" type="date" id="pPurchaseDate" tabindex="2" >
                    <label class="Animation-label" for="date">Purchase  Date</label>
                </div>
            </div>
        </div>
        <!-- TODO ISBN -->
        <div class="Input-box" id="inputBoxISBN">
            <div class="Box">
                <i class="Box-i fa-solid fa-qrcode"></i>
                <div class="Box-animation Animation">
                    <input class="Animation-input" name="inputISBN"
                        id="inputISBN" type="text"
                        placeholder=" " autocomplete="valorNoValido"
                        tabindex="3" required>
                    <label class="Animation-label" for="inputISBN">ISBN *</label>
                    <label class="Animation-info" for="inputBoxISBN" id="infoISBN"><i
                            class="fa-solid fa-circle-info"></i></label>
                    <label class="Animation-closeInfo" for="inputBoxISBN"
                        id="closeInfoISBN"><i class="fa-solid fa-circle-info"></i></label>
                </div>
            </div>
            <div class="Input-error Error fieldErr" id="validationISBN">
                <div class="Error-text">
                    <span id="errorISBN" class="fieldErrText">ISBN cannot be
                        empty.</span>
                </div>
            </div>
        </div>
    </div>
    <div class="New-boxes">
        <!-- TODO Title -->
        <div class="Input-box Input-boxError" id="inputBoxTitle">
            <div class="Box">
                <i class="Box-i fa-solid fa-book"></i>
                <div class="Box-animation Animation">
                    <input class="Animation-input" name="inputTitle" id="inputTitle"
                        type="text"
                        placeholder=" " autocomplete="valorNoValido"
                        required="required" tabindex="4">
                    <label class="Animation-label" for="inputTitle">Title *</label>
                    <label class="Animation-info" for="inputTitle" id="infoTitle"><i
                            class="fa-solid fa-circle-info"></i></label>
                    <label class="Animation-closeInfo" for="inputTitle"
                        id="closeInfoTitle"><i class="fa-solid fa-circle-info"></i></label>
                </div>
            </div>
            <div class="Input-error Error fieldErr" id="validationTitle">
                <div class="Error-text">
                    <span id="errorTitle" class="fieldErrText">Title cannot be
                        empty.</span>
                </div>
            </div>
        </div>
        <!-- TODO AUTHOR -->
        <div class="Input-box Input-boxError" id="inputBoxAuthor">
            <div class="Box">
                <i class="Box-i fa-solid fa-user-secret"></i>
                <div class="Box-animation Animation">
                    <input class="Animation-input" name="inputAuthor"
                        id="inputAuthor" type="text"
                        placeholder=" " autocomplete="valorNoValido"
                        tabindex="5" required>
                    <label class="Animation-label" for="inputAuthor">Author *</label>
                    <label class="Animation-info" for="inputAuthor"
                        id="infoAuthor"><i class="fa-solid fa-circle-info"></i></label>
                    <label class="Animation-closeInfo" for="inputAuthor"
                        id="closeInfoAuthor"><i class="fa-solid
                            fa-circle-info"></i></label>
                </div>
            </div>
            <div class="Input-error Error fieldErr" id="validationAuthor">
                <div class="Error-text">
                    <span id="errorAuthor" class="fieldErrText">Author cannot be
                        empty.</span>
                </div>
            </div>
        </div>
    </div>
    <div class="New-boxes">
        <!-- TODO Collection -->
        <div class="Input-box" id="inputBoxCollection">
            <div class="Box">
                <i class="Box-i fa-solid fa-boxes-stacked"></i>
                <div class="Box-animation Animation">
                    <input class="Animation-input" name="inputCollection" id="inputCollection"
                        type="text"
                        placeholder=" " autocomplete="valorNoValido"
                        tabindex="6">
                    <label class="Animation-label" for="inputCollection">Collection</label>
                </div>
            </div>
        </div>
        <!-- TODO Editorial -->
        <div class="Input-box" id="inputBoxEditorial">
            <div class="Box">
                <i class="Box-i fa-regular fa-newspaper"></i>
                <div class="Box-animation Animation">
                    <input class="Animation-input" name="inputEditorial"
                        id="inputEditorial" type="text"
                        placeholder=" " autocomplete="valorNoValido"
                        tabindex="7" >
                    <label class="Animation-label" for="inputEditorial">Editorial</label>
                </div>
            </div>
        </div>
    </div>
    <div class="New-boxes">
        <!-- TODO Language -->
        <div class="Input-box" id="inputBoxLanguage">
            <div class="Box">
                <i class="Box-i fa-solid fa-language"></i>
                <div class="Box-animation Animation">
                    <input class="Animation-input" name="inputLanguage" id="inputLanguage"
                        type="text"
                        placeholder=" " autocomplete="valorNoValido"
                        tabindex="8">
                    <label class="Animation-label" for="inputLanguage">Language</label>
                </div>
            </div>
            <div class="Input-error Error fieldErr" id="validationLanguage">
                <div class="Error-text">
                    <span id="errorLanguage" class="fieldErrText">Language cannot be
                        empty.</span>
                </div>
            </div>
        </div>
        <!-- TODO Type -->
        <div class="Input-box" id="inputBoxType">
            <div class="Box">
                <i class="Box-i fa-solid fa-tags"></i>
                <div class="Box-animation Animation" id="addSelect">
                    <select class="Animation-input isSelect" id="selectCategory" name="selectCategory"  size="2" tabindex="9">
                        <option></option>
                    </select>
                    <label class="Animation-label" for="selectCategory">Select or add category</label>
                </div>
            </div>
        </div>
    </div>
    <div class="New-boxes isTextarea-boxes">
        <!-- TODO Observaciones -->
        <div class="Input-box isTextarea" id="inputBoxObservation">
            <div class="Box isTextarea-box">
                <i class="Box-i fa-solid fa-message"></i>
                <div class="Box-animation Animation">
                    <textarea class="Animation-input isTextarea-input" name="inputObservation" id="inputObservation" tabindex="10" rows="4" cols="50" maxlength="800"></textarea>
                    <label class="Animation-label" for="inputObservation">Observation</label>
                </div>
            </div>
        </div>
    </div>
</div>

<script defer type="text/javascript">
    const infos         = document.querySelectorAll( ".Animation-info"       );
    const closeInfos    = document.querySelectorAll( ".Animation-closeInfo"  );
    const fieldErrs     = document.querySelectorAll( ".fieldErr"             );
    const fieldErrTexts = document.querySelectorAll( ".fieldErrText"         );
    const inputNumReference =  document.getElementById("numReference");
    const inputBookID =  document.getElementById("bookID");
    const inputPurchaseDate =  document.getElementById("pPurchaseDate");
    const inputISBN =  document.getElementById("inputISBN");
    const inputTitle =  document.getElementById("inputTitle");
    const inputAuthor =  document.getElementById("inputAuthor");
    const inputCollection =  document.getElementById("inputCollection");
    const inputEditorial =  document.getElementById("inputEditorial");
    const inputLanguage =  document.getElementById("inputLanguage");
    const inputType =  document.getElementById("selectCategory");
    const inputObservation = document.getElementById("inputObservation");
    let dataExistsISBN = "";

    const field = {
        numReference: true,
        purchaseDate: true,
        ISBN: false,
        title: false,
        author: false,
        collection: true,
        editorial: true,
        language: true,
        category: true,
        observation: true,
    };

    const activesInfos = {
        title: false,
        author: false,
        ISBN: false,
        purchaseDate: false,
    }
    
    const expresiones = {
        title: /^.{2,}$/,
        author: /^.{4,}$/,
        ISBN: /^\S+$/
    };

    let duplicateISBN = false;

    const textError = {
        title:
            "[ ERROR ] : The Title field cannot be empty.",
        author:
            "[ ERROR ] : The Author field cannot be empty.",
        ISBN:
            `[ ERROR ] : The ISBN already exists:  <span class="Links" onclick="showExistsISBN()">show</span>`,
            
    };

    async function showExistsISBN() {
        const title = dataExistsISBN.swalTitle;
        const message = dataExistsISBN.successMessage || dataExistsISBN.errorMessage;
        const dataBook = dataExistsISBN.data;
        Swal.fire({
            position: 'top-end',
            title: title || 'Are you sure?',
            html: `<div style="font-size: .8em; font-family: 'Roboto', sans-serif;">
                <span style="font-weight: 600">BOOK ID: </span>${dataBook[0].bookID}
                <br>
                <span style="font-weight: 600">TITLE: </span>${dataBook[0].title}
            </div>`,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: `View it's book!`
            }).then(async (result) => {
            if (result.isConfirmed) {
                const bookID = dataBook[0].bookID;
                window.open(`/workspace/books/info/${bookID}`, '_blank');
            }
            })
    }
    // TODO ✅ CARGA LAS FUNCIONES DE SELECT2
    (async function loadSelectTags() {
        await $(".isSelect").select2({
            tags: true,
            placeholder: "Select or add category",
        });
    })();

    async function existsISBN(target) {
        const isbn = target.value.trim();
        const urlExistsIsbn = `/api/books/isbn/${isbn}`;
        fetch(urlExistsIsbn, {
            method: "GET",
            headers:{
            'Content-Type': 'application/json'
        }
        })
            .then((response) => response.json())
            .then((data) => {
                const success = data.success;
                const message = data.messageSuccess;
                dataExistsISBN = data;
                if (success) {
                    inputISBN.classList.add("isError");
                    document.getElementById("infoISBN").classList.add("isVisible");
                    field["ISBN"] = false;
                } else {
                    dataExistsISBN = "";
                    duplicateISBN = false;                   
                    document.getElementById("inputBoxISBN").removeAttribute("data-error");
                    document.getElementById("inputBoxPurchaseDate").removeAttribute("data-error");
                    document.getElementById('validationISBN').classList.remove("isActive");
                    document.getElementById('errorISBN').innerHTML = "";
                    document.getElementById('inputISBN').classList.remove("isError");
                    document.getElementById('infoISBN').classList.remove("isVisible");
                    document.getElementById('closeInfoISBN').classList.remove("isVisible");
                    field['ISBN'] = true;
                    activesInfos['ISBN'] = false;
                }
            })
    }

    //TODO TABULAR para BUSCAR EL ISBN
    inputISBN.addEventListener("keydown", function(event) {
        if (event.keyCode === 9) {
            existsISBN(event.target)
        }
    });

// TODO ✅ VALIDACIONES INPUTS PARTNERS
    const validateFormBook = async e => {
        switch (e.target.name) {
            case "inputTitle":
                fieldEmpty(expresiones.title, e.target, "validationTitle", "errorTitle", textError.title, "title", "infoTitle", "closeInfoTitle");
                break;
            case "inputAuthor":
                fieldEmpty(expresiones.author, e.target, "validationAuthor", "errorAuthor", textError.author, "author", "infoAuthor", "closeInfoAuthor");
                break;
            case "inputISBN":
                fieldEmpty(expresiones.ISBN, e.target, "validationISBN", "errorISBN", textError.ISBN, "ISBN", "infoISBN", "closeInfoISBN");
                break;
            }
    };

// TODO ✅ RESET FORMS BOOKS
    const resetFormsBook = async (e) => {
        try {
            document.getElementById("formEditBook").reset();
            $('#selectCategory').html("");
        }catch (error){ }
        try {
            if(_STATEBOOK) {
                await ClosePopup("#modalEditBook");
            }
        } catch (error) {}
        try {
            document.getElementById("formAddBook").reset();
            $('#selectCategory').html("");
        }catch (error){ }
        
    }

// TODO ✅ RESPONSE DATA SUCCESS
    const responseData = async (data) =>  {
        try{
            msgValidation = data.msgValidation[0].msg;
        } catch (error) { }
        const menssage = data.messageSuccess || data.errorMessage || msgValidation;
        const title = data.swalTitle;
        const success = data.success;
        if(success) {
            Swal.fire({
                icon: 'success',
                timer: 2000,
                title: title || "Success....!",
                text: menssage,
            }).then(async () => {
                await resetFormsBook();
                try{
                    if(_STATEINFOBOOK) { 
                        location.reload()
                    }
                } catch (error) { };
                try{
                    if(_STATEBOOK) {
                        await reloadDataBooks();
                    }
                } catch (error) { };
            });
        } else if(success === false) {
            Swal.fire({
                icon: 'error',
                timer: 2000,
                title: title  || "Oops....!",
                text: menssage,
            });
        }

    };

// TODO OBTENER VALOR DE OPTION 
    function getValueOption(opt) {
        const value = opt;
        if (value === undefined) { 
            return ""
        } else {
            return value.value;
        }
    }

// TODO ✅ OBTENER DATOS DEL FORMULARIO
    async function dataBook() {
        const index = await inputType.selectedIndex;
        const opt = inputType[index];
        const bookID = inputBookID.value;
        const data = await {
            bookID,
            numReference: inputNumReference.value,
            purchase_date: inputPurchaseDate.value,
            isbn: capitalizeFirstLetter(inputISBN.value.trim()),
            title: capitalizeFirstLetter(inputTitle.value.trim()),
            author: capitalizeWords(inputAuthor.value.trim()),
            collection: capitalizeFirstLetter(inputCollection.value.trim()),
            editorial: capitalizeFirstLetter(inputEditorial.value.trim()),
            language: capitalizeFirstLetter(inputLanguage.value.trim()),
            type: capitalizeWords(getValueOption(opt)),
            observation: capitalizeFirstLetter(inputObservation.value.trim())
        };
        //EDIT
        try {
            if(_STATEEDITBOOK) {
                const bookID = data.bookID;
                const urlUpdateBook = `/api/books/update/${bookID}`
                fetch(urlUpdateBook, {
                    method: "POST",
                    body: JSON.stringify(data),
                    headers:{
                        'Content-Type': 'application/json'
                    }
                })
                    .then((response) => response.json())
                    .then(async (data) => await responseData(data));
            }
        } catch (err) { }
        try {
            if(_STATEBOOK) {
                const bookID = data.bookID;
                const urlUpdateBook = `/api/books/update/${bookID}`
                fetch(urlUpdateBook, {
                    method: "POST",
                    body: JSON.stringify(data),
                    headers:{
                        'Content-Type': 'application/json'
                    }
                })
                    .then((response) => response.json())
                    .then(async (data) => await responseData(data));
            }
        } catch (err) { }
        // ADD
        try {
            if(_STATENEWBOOK) {
                const urlADDBook = "/api/books/add/";
                fetch(urlADDBook, {
                    method: "POST",
                    body: JSON.stringify(data),
                    headers:{
                        'Content-Type': 'application/json'
                    }
                })
                    .then((response) => response.json())
                    .then(async(data) => await responseData(data));
            }
        } catch (err) { }
    }


</script>