<link rel="stylesheet" href="/style/newForm.min.css">

<div class="modal fade" role="dialog" aria-labelledby="modalNotifyLabel" aria-hidden="true" style="padding-right:0"
    id="modalNotify" name="modalNotify">

    <div class="modal-dialog" role="document">

        <div class="modal-content">

            <div class="Modal-header"
                style="background-color: var(--Background-Color-forms-book); color: var(--Color-forms-book)">
                <h1 class="Modal-title" id="modalNotifyLabel">NOTIFY ME</h1>
            </div>

            <div class="New">
                <div id="toast-danger" class="flex items-center w-full max-w p-4 mb-4 text-gray-500 bg-white rounded-lg shadow dark:text-gray-400 dark:bg-gray-800" role="alert" hidden>
                    <div class="inline-flex items-center justify-center flex-shrink-0 w-8 h-8 text-red-500 bg-red-100 rounded-lg dark:bg-red-800 dark:text-red-200">
                        <svg class="w-5 h-5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                            <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5Zm3.707 11.793a1 1 0 1 1-1.414 1.414L10 11.414l-2.293 2.293a1 1 0 0 1-1.414-1.414L8.586 10 6.293 7.707a1 1 0 0 1 1.414-1.414L10 8.586l2.293-2.293a1 1 0 0 1 1.414 1.414L11.414 10l2.293 2.293Z"/>
                        </svg>
                        <span class="sr-only">Error icon</span>
                    </div>
                    <div class="ms-3 text-sm font-normal" id="text_error_notify">.</div>
                    <button type="button" class="ms-auto -mx-1.5 -my-1.5 bg-white text-gray-400 hover:text-gray-900 rounded-lg focus:ring-2 focus:ring-gray-300 p-1.5 hover:bg-gray-100 inline-flex items-center justify-center h-8 w-8 dark:text-gray-500 dark:hover:text-white dark:bg-gray-800 dark:hover:bg-gray-700" data-dismiss-target="#toast-danger" aria-label="Close" id="btn_close_toast">
                        <span class="sr-only">Close</span>
                        <svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
                            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"/>
                        </svg>
                    </button>
                </div>
                <form class="New-form" id="formNotify" name="formNotify" style="margin-top: 0px">
                    {{> formNotify}}
                    <div class="Input-button">
                        <button type="button" class="Button-cancel" data-dismiss="modal" tabindex="10"
                            id="btnCancelNotify" onclick="closeModalNotify()">Cancel</button>
                        <input class="Button-accept" id="btnUpdateBook" type="submit" value='SAVE IN'
                            tabindex="11"></input>
                    </div>

                </form>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript" defer>
    const formNotify = document.getElementById("formNotify");
    const inputsNotify = document.querySelectorAll("#formNotify input");
    const closeButton = document.getElementById('btn_close_toast');
    closeButton.addEventListener('click', closeToast);
    field.title = true;
    field.author = true;
    field.ISBN = true;
    const expresionesNT = {
        dni: /^[a-zA-Z0-9\_\-]{4,16}$/, // Letras, numeros, guion y guion_bajo
        name: /^[a-zA-ZÀ-ÿ\s]{4,40}$/, // Letras, numeros, guion y guion_bajo
        lastname: /^[a-zA-ZÀ-ÿ\s]{4,40}$/,// Letras y espacios, pueden llevar acentos.
        email: /^\w+([.-_+]?\w+)*@\w+([.-]?\w+)*(\.\w{2,10})+$/,
        //email: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-z]{2,}$/,
        mobile: /^\(?([0-9]{3})\)?([0-9]{3})?([0-9]{3})?$/,
    }

    const fieldChange = {
        mobile: false,
        email: false,
    }

    const fieldNT = {
        mobile: false,
        email: false,
    };

    const textErrorNT = {
    dni:
        "[ ERROR ] : The DNI must be written in full, with the initial [8] digits and the final letter, without spaces or hyphens. Example 73523821F and not 73523821-F.<br/>[ ERROR ] : The NIE must be written with the initial X or T, all the numbers and the final letter, without spaces or hyphens.Example: X0523821F.",
    name:
        "[ ERROR ] : Name field must be between 4 to 40 digits and can contain letters, accents and spaces, it cannot contain special characters or numbers.",
    lastname:
        "[ ERROR ] : Last Name field must be between 4 to 40 digits and can contain letters, accents and spaces, it cannot contain special characters or numbers.",
    email: 
        "[ ERROR ] : The format Email address is incorrect, the Email can only contain letters, numbers, periods, hyphens and underscores.",
    mobile:
        "[ ERROR ] : Mobile field cannot contain letters or special characters, it must only contain [ 9 ] digits or empty.",
    landline:
        "[ ERROR ] : Landline field cannot contain letters or special characters, it must only contain [ 9 ] digits or empty.",
};
    
    try {
        if ($('#modalNotify').val() === '') {
            _STATENOTIFY = true;
        }
    } catch (error) { }
    
    try {
        document.addEventListener("DOMContentLoaded", function () {
            formNotify.addEventListener("submit", correctFormNotify);
        });
    } catch (error) { }

    function changeField(e, fieldChage) {
        fieldChange[fieldChage] = true;
        fieldNT[fieldChage] = false;
        e.addEventListener("blur", validateFormNotify);
        e.addEventListener("keyup", validateFormNotify);
        e.addEventListener("keypress", k => {
            if (k.key === "Enter") {
                validateFormNotify;
            }
        });
    };

    const validateFormNotify = async e => {
        switch (e.target.name) {
            //case "inputDni":
            //    await checkElement('inputDni');
            //    break;
            case "inputEmailNT":
                await fieldEmpty(
                    expresionesNT.email, 
                    e.target, 
                    'validationEmailNT', 
                    'errorEmailNT', 
                    textErrorNT.email, 
                    'email', 
                    'infoEmailNT', 
                    'closeInfoEmailNT');
                break;
            case "inputPhoneNT":
                await fieldEmpty(
                    expresionesNT.mobile, 
                    e.target, 
                    'validationMobile', 
                    'errorMobile', 
                    textErrorNT.mobile, 
                    'mobile', 
                    'infoMobile', 
                    'closeInfoMobile');
                break;
        }
    };

    async function fieldEmptyNT(e) {
        console.log({e})
    }

    function resetSelect() {
        var selectDniNT = document.getElementById('selectDniNT');
        while (selectDniNT.options.length > 1) {
            selectDniNT.remove(1);
        }
        selectDniNT.selectedIndex = -1;
        closeToast();
    }

    function closeModalNotify() {
        $('#modalNotify').modal('hide');
        document.getElementById('formNotify').reset();
        resetSelect();
        closeToast();
    }

    function showToast(message) {
        const textErrorNotify = document.getElementById('text_error_notify');
        textErrorNotify.textContent = message;
        alertErrorNT.removeAttribute('hidden');
        setTimeout(closeToast, 5000);
    }

    function closeToast() {
        alertErrorNT.setAttribute('hidden', true);
    }

    async function correctFormNotify(e) {
        e.preventDefault();
        const bookID = removeZeros(inputBookIDNT.value);
        const selectDniNT  = document.getElementById("selectDniNT")
        const dni = selectDniNT.value;
        const isbn = inputBookISBNNT.value;
        const indexDni = selectDniNT.selectedIndex;
        console.log("email ", inputEmailNT.value.length)
        console.log("inputPhoneNT ", inputPhoneNT.value)
        if(indexDni === -1) {
            showToast('You must select a DNI partner');
        } else if (!checkEmail.checked && !checkMobile.checked) {
            showToast('You must select a notification method');
        } else if (checkEmail.checked && inputEmailNT.value.length === 0 )
        {   
            inputEmailNT.classList.add("isError");
            document.getElementById("infoEmailNT").classList.add("isVisible");
            inputEmailNT.focus();
            showToast('no puede estar vacio el email');
        } else if (checkMobile.checked && inputPhoneNT.value.length === 0) {
            showToast('no puede estar vacio el phone');
        }
        else {
            const data = {
                bookID,
                dni,
                isbn,
            }
            console.log({data})
            closeToast()
        }
    }
    
</script>