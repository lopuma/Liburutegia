<div class="Info-contenedor">
    <ul class="Info-tabs">
        <div class="Tabs-titles">
            <li class="Info-tab activo isActive">Information</li>
            {{#each partner}}
            <li class="Info-tab" onClick="infoPartner({{this.id_partner}})" style="cursor: pointer;">Active Reserves
            </li>
            <li class="Info-tab" onClick="infoHistory({{this.id_partner}})" style="cursor: pointer;">Reservation History
            </li>
            {{/each}}
        </div>
        <div class="Tabs-direcciones">
            {{#each partner}}
            <a href="#" class="atras" onclick="avanzaSlide(-1, {{this.id_partner}})">&#10094;</a>
            <a href="#" class="adelante" onclick="avanzaSlide(1, {{this.id_partner}})">&#10095;</a>
            {{/each}}
        </div>
    </ul>
    <div class="Info-subcontenedor">
        <div class="Info-bloque activo">
            {{#each partner}}
            <h3>NAME {{this.name}}</h3>
            <h3>LASTNAME {{this.lastname}}</h3>
            {{/each}}
        </div>
        <div class="Info-bloque" id="InfoBloque">
            <div class="Bloque-table">
                <table class="table table-bordered table-striped" id="tablePartnerActive">
                    <thead>
                        <tr class="Dashboard-tr">
                            <th>TITLE</th>
                            <th>AUTHOR</th>
                            <th>DATE RESERVATION</th>
                            <th>DATE DELIVER</th>
                            <th>ACTIONS</th>
                        </tr>
                    </thead>
                    <tbody id="active">
                        <div id="spinner" style="display: none">
                            <div class="lds-dual-ring">&nbsp</div>
                        </div>
                    </tbody>
                    <tfoot>
                        <tr class="Dashboard-tr">
                            <th>TITLE</th>
                            <th>AUTHOR</th>
                            <th>DATE RESERVATION</th>
                            <th>DATE DELIVER</th>
                            <th>ACTIONS</th>
                        </tr>
                    </tfoot>
                </table>
            </div>
        </div>

        <div class="Info-bloque">
            <div class="Bloque-table">
                <table class="table table-bordered table-striped" id="tablePartnerHistory">
                    <thead>
                        <tr class="Dashboard-tr hotel_a">
                            <th>TITLE</th>
                            <th>AUTHOR</th>
                            <th>DATE RESERVATION</th>
                            <th>DATE DELIVER</th>
                            <th>SCORE</th>
                            <th>REVIEW</th>
                        </tr>
                    </thead>
                    <tbody id="history">
                        <div id="spinnerHistory" style="display: none">
                            <div class="lds-dual-ring">&nbsp</div>
                        </div>
                    </tbody>
                    <tfoot>
                        <tr class="Dashboard-tr">
                            <th>TITLE</th>
                            <th>AUTHOR</th>
                            <th>DATE RESERVATION</th>
                            <th>DATE DELIVER</th>
                            <th>SCORE</th>
                            <th>REVIEW</th>
                        </tr>
                    </tfoot>
                </table>
            </div>
        </div>
    </div>
</div>

<link href="/style/info.css" rel="stylesheet" />

<script defer>
    {{!-- ENTREGA --}}
    async function deliver(book_id, count) {
        try{
            const idBook = book_id;
            const url = `/api/books/deliver/${idBook}`;
            const dni = "15244139 S";
            const score = "3";
            const review = "entregado";
            let data = {
                dni: dni,
                score: score,
                review: review
            };
            Swal.fire({
                title: 'Deliver',
                text: `Do you want to add a review, for the book : ${idBook} ?`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, review it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch(url, {
                        method: 'POST',
                        body: JSON.stringify(data),
                        headers: {
                            "Content-Type": "application/json; charset=UTF-8"
                        }
                    })
                        .then((response) => response)
                        .then((data) => {
                            console.log('Success:', data);
                        })
                        .catch((error) => {
                            console.error('Error:', error);
                        });
                        document.getElementById(`row${count}`).remove();
                    Swal.fire(
                        'Deleted!',
                        'Your file has been deleted.',
                        'success'
                    )
                } else {
                    fetch(url, {
                        method: 'POST',
                        body: "",
                        headers: {
                            "Content-Type": "application/json; charset=UTF-8"
                        }
                    })
                        .then((response) => response)
                        .then((data) => {
                            console.log('Success:', data);
                        })
                        .catch((error) => {
                            console.error('Error:', error);
                        });
                    document.getElementById(`row${count}`).remove();
                }
            })
        } catch (error) {
            console.log(":error ", error)
        }
    }

    async function infoPartner(id_partner) {
            const idPartner = id_partner;
            const url = `/api/partners/info/${idPartner}`;
            fetch(url)
                .then(response => response.json())
                .then(data => obtenerPartner(data));
        }

        async function obtenerPartner(data) {
            const fecha = new Date();
            const actualDate = new Intl.DateTimeFormat("en-US").format(fecha);
            document.getElementById("spinner").style.display = "block";
            const vacio = Object.keys(data).length === 0;
            let count = 0;
            let body = "";
            if (vacio) {
                body += `<td COLSPAN="5" style="text-align: center; font-weight: bold">No data found</td>`;
                setTimeout(() => {
                    document.getElementById("spinner").style.display = "none";
                    document.getElementById("active").innerHTML = body;
                }, 300);
            } else {
                for (let elemento of data) {
                    count += 1;
                    console.log("COUNT ==> ", count)
                    const resDate = elemento.reservation_date;
                    const delDate = elemento.deliver_date;
                    const reserved = elemento.reserved;
                    let reservationDate = new Date(resDate);
                    reservationDate = new Intl.DateTimeFormat("en-US").format(reservationDate);
                    let deliverDate = new Date(delDate);
                    deliverDate = new Intl.DateTimeFormat("en-US").format(deliverDate);
                    if (deliverDate <= actualDate) {
                        var color = "red";
                        var statu = "Past date";
                    } else {
                        color = "green";
                        statu = "Available";
                    }
                    if (reserved === 1) {
                        body += `<tr id="row${count}" value="row${count}"><td>${elemento.title}</td><td>${elemento.author}</td><td>${reservationDate}</td><td style=color:${color} title=${statu}>${deliverDate}</td><td><button id="btnDeliver" onClick=deliver(` + elemento.book_id +`,`+ count + `) class="btn btn-warning" title="Deliver Book"><i class="fa-regular fa-handshake"></i> Deliver Book</button></td></tr>`;
                        innerActive(body);
                    }
                }

                async function innerActive(body) {
                    document.getElementById("active").innerHTML = "";
                    setTimeout(() => {
                        document.getElementById("spinner").style.display = "none";
                        document.getElementById("active").innerHTML = body;
                        $(document).ready(function () {
                            $("#tablePartnerActive").DataTable({
                                responsive: true,
                                lengthMenu: [
                                    [5, 10, 15, 25, 50, -1],
                                    [5, 10, 15, 25, 50, "All"]
                                ],
                                pageLength: 5,
                                retrieve: true
                            });
                        });
                    }, "300");
                }
            }
        }

        async function infoHistory(id_partner) {
            const idPartner = id_partner;
            const url = `/api/partners/info/${idPartner}`;
            fetch(url)
                .then(response => response.json())
                .then(data => obtenerHistory(data));
        }

        async function obtenerHistory(data) {
            const fecha = new Date();
            actualDate = new Intl.DateTimeFormat("en-US").format(fecha);
            document.getElementById("spinnerHistory").style.display = "block";
            vacio = Object.keys(data).length === 0;
            let bodyHistory = "";
            if (vacio) {
                bodyHistory += `<td COLSPAN="6" style="text-align: center; font-weight: bold">No data found</td>`;
                setTimeout(() => {
                    document.getElementById("spinnerHistory").style.display = "none";
                    document.getElementById("history").innerHTML = bodyHistory;
                }, 300);
            } else {
                for (let elemento of data) {
                    const starTotal = 5;
                    const resDate = elemento.reservation_date;
                    const delDate = elemento.deliver_date;
                    const reserved = elemento.reserved;
                    let reservationDate = new Date(resDate);
                    reservationDate = new Intl.DateTimeFormat("en-US").format(reservationDate);
                    let deliverDate = new Date(delDate);
                    deliverDate = new Intl.DateTimeFormat("en-US").format(deliverDate);
                    const starPercentage = elemento.score / starTotal * 100;
                    const starPercentageRounded = `${Math.round(starPercentage / 10) * 10}%`;
                    if (reserved === 0) {
                        bodyHistory += `<tr><td>${elemento.title}</td><td>${elemento.author}</td><td>${reservationDate}</td><td>${deliverDate}</td><td><div class="stars-outer"><div class="stars-inner" style="width: ${starPercentageRounded}; cursor: pointer" title="score ${elemento.score}"></div></div></td><td>${elemento.review}</td></tr>`;
                        innerHistory(bodyHistory);
                    }
                }

                async function innerHistory(bodyHistory) {
                    document.getElementById("history").innerHTML = "";
                    setTimeout(() => {
                        document.getElementById("spinnerHistory").style.display = "none";
                        document.getElementById("history").innerHTML = bodyHistory;
                        $(document).ready(function () {
                            $("#tablePartnerHistory").DataTable({
                                responsive: true,
                                lengthMenu: [
                                    [5, 10, 15, 25, 50, -1],
                                    [5, 10, 15, 25, 50, "All"]
                                ],
                                pageLength: 5,
                                retrieve: true
                            });
                        });
                    }, "300");
                }
            }
        }

        const li = document.querySelectorAll(".Info-tab");
        const bloque = document.querySelectorAll(".Info-bloque");
        li.forEach((cadaLi, i) => {
            li[i].addEventListener("click", () => {
                li.forEach((cadaLi, i) => {
                    // Quitando la clase activo de cada li
                    li[i].classList.remove("activo");
                    // Quitando la clase activo de cada bloque
                    bloque[i].classList.remove("activo");
                    //document.getElementById('InfoSubcontenedor').classList.add('isNotActivo')
                });
                // En el li que hemos click le añadimos la clase activo
                li[i].classList.add("activo");
                // En el bloque con la misma posición le añadimos la clase activo
                bloque[i].classList.add("activo");
                bloque[i].classList.add("isScroll");
            });
        });

        let indice = 1;
        //muestraSlides(indice);

        function avanzaSlide(n, idPartner) {
            muestraSlides((indice += n));
            try {
                infoPartner(idPartner);
            } catch (error) {
                console.error(error);
            }
        }

        function posicionSlide(n) {
            muestraSlides((indice = n));
        }
        //setInterval(function tiempo() {
        //    muestraSlides(indice += 1)
        //}, 4000);
        function muestraSlides(n) {
            let i;
            let slides = document.getElementsByClassName("Info-tab");
            let barras = document.getElementsByClassName("barra");

            if (n > slides.length) {
                indice = 1;
            }
            if (n < 1) {
                indice = slides.length;
            }
            for (i = 0; i < slides.length; i++) {
                slides[i].style.display = "none";
                slides[i].classList.remove("activo");
                bloque[i].classList.remove("activo");
            }
            for (i = 0; i < barras.length; i++) {
                barras[i].className = barras[i].className.replace(" active", "");
            }

            slides[indice - 1].style.display = "block";
            slides[indice - 1].classList.add("activo");
            bloque[indice - 1].classList.add("activo");
        }
</script>