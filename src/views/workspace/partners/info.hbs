<!--Modal para CRUD-->
<div id="modalStar" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="modalStar"
    aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Star Rating</h5>
            </div>
            <div class="post">
                <div class="text">Thanks for rating us!</div>
                <div class="edit">EDIT</div>
            </div>
            <div class="star-widget">
                <input type="radio" value="5" name="rate" id="rate-5">
                <label for="rate-5" class="fas fa-star"></label>
                <input type="radio" value="4" name="rate" id="rate-4">
                <label for="rate-4" class="fas fa-star"></label>
                <input type="radio" value="3" name="rate" id="rate-3">
                <label for="rate-3" class="fas fa-star"></label>
                <input type="radio" value="2" name="rate" id="rate-2">
                <label for="rate-2" class="fas fa-star"></label>
                <input type="radio" value="1" name="rate" id="rate-1">
                <label for="rate-1" class="fas fa-star"></label>
                <form action="#" id="formuStar">
                    <header></header>
                    <input type="text" class="form-control" id="id_book" tabindex="0" hidden>
                    <input type="text" class="form-control" id="id_booking" tabindex="1" hidden>
                    <div class="textarea">
                        <textarea id="textarea" cols="30" placeholder="Describe your experience.."></textarea>
                    </div>
                    <div class="btn">
                        <button type="submit">Post</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="Info-contenedor">
    <ul class="Info-tabs">
        <div class="Tabs-titles">
            <li class="Info-tab activo isActive">Information</li>
            {{#each partner}}
            <li class="Info-tab" onClick="infoPartner({{this.id_partner}})" style="cursor: pointer;">Active Reserves
            </li>
            <li class="Info-tab" onClick="infoHistory({{this.id_partner}})" style="cursor: pointer;">Reservation History
            </li>
            {{/each}}
        </div>
        <div class="Tabs-direcciones">
            {{#each partner}}
            <a href="#" class="atras" onclick="avanzaSlide(-1, {{this.id_partner}})">&#10094;</a>
            <a href="#" class="adelante" onclick="avanzaSlide(1, {{this.id_partner}})">&#10095;</a>
            {{/each}}
        </div>
    </ul>
    <div class="Info-subcontenedor">
        <div class="Info-bloque activo">
            {{#each partner}}
            <h3>NAME {{this.name}}</h3>
            <h3>LASTNAME {{this.lastname}}</h3>
            {{/each}}
        </div>
        <div class="Info-bloque Dashboard" id="infoBloqueActive">
            <div class="Bloque-table Dashboard-row">
                <table class="Dashboard-table table table-bordered   display wrap" id="tablePartnerActive" cellspacing="0" width="100%">
                    <thead class="Dashboard-head">
                        <tr>
                            <th>ISBN</th>
                            <th>TITLE</th>
                            <th>AUTHOR</th>
                            <th>DATE RESERVATION</th>
                            <th>ACTIONS</th>
                        </tr>
                    </thead>
                    <tbody id="activeData">
                        <div id="spinnerActive">
                            <div class="lds-dual-ring">&nbsp</div>
                        </div>
                    </tbody>
                    <tfoot  class="Dashboard-foot">
                        <tr>
                            <th>ISBN</th>
                            <th>TITLE</th>
                            <th>AUTHOR</th>
                            <th>DATE RESERVATION</th>
                            <th>ACTIONS</th>
                        </tr>
                    </tfoot>
                </table>
            </div>
        </div>
        <div class="Info-bloque Dashboard" id="infoBloqueHistory">
            <div class="Bloque-table Dashboard-row">
                <table class="Dashboard-table table table-bordered  display wrap" id="tablePartnerHistory" cellspacing="0" width="100%">
                    <thead class="Dashboard-head">
                        <tr>
                            <th>ISBN</th>
                            <th>TITLE</th>
                            <th>AUTHOR</th>
                            <th>DATE RESERVATION</th>
                            <th>DATE DELIVER</th>
                            <th>SCORE</th>
                            <th>REVIEW</th>
                        </tr>
                    </thead>
                    <tbody id="historyData">
                        <div id="spinnerHistory">
                            <div class="lds-dual-ring">&nbsp</div>
                        </div>
                    </tbody>
                    <tfoot class="Dashboard-foot">
                        <tr>
                            <th>ISBN</th>
                            <th>TITLE</th>
                            <th>AUTHOR</th>
                            <th>DATE RESERVATION</th>
                            <th>DATE DELIVER</th>
                            <th>SCORE</th>
                            <th>REVIEW</th>
                        </tr>
                    </tfoot>
                </table>
            </div>
        </div>
    </div>
</div>

<link href="/style/info.css" rel="stylesheet" />

<script defer>
    const post = document.querySelector(".post");
    const widget = document.querySelector(".star-widget");
    const editBtn = document.querySelector(".edit");
    const textarea = document.querySelector("#textarea");
    const li = document.querySelectorAll(".Info-tab");
    const bloque = document.querySelectorAll(".Info-bloque");
    const tbodyHistory = document.getElementById("historyData");
    const tbodyActive = document.getElementById("activeData");
    const infoBloqueHistory = document.getElementById("infoBloqueHistory");
    const infoBloqueActive = document.getElementById("infoBloqueActive");
    const spinnerHistory = document.getElementById("spinnerHistory");
    const spinnerActive = document.getElementById("spinnerActive");
    
    //TODO OBTENER DATOS DEL MODAL
    $('#formuStar').submit(async function (e) {
        e.preventDefault();
        let activoFijo = $('input[name="rate"]:checked').val();
        const fecha = new Date();
        const idBook = $.trim($('#id_book').val());
        const idBooking = $.trim($('#id_booking').val());
        const score = activoFijo;
        const review = textarea.value;
        const url = `/api/books/deliver/${idBook}`;
        const deliver_date_review = new Intl.DateTimeFormat("en-US").format(fecha);
        let dateActual = new Date();
        dateActual = new Intl.DateTimeFormat("az").format(dateActual).replace("/", "-");
            
        const data = {
            idBooking,
            score,
            review, 
            deliver_date_review: dateActual
        }
        fetch(url, {
            method: 'POST',
            body: JSON.stringify(data),
            headers: {
                "Content-Type": "application/json; charset=UTF-8"
            }
        })
            .then((response) => response)
            .then((data) => {
                console.log('Success:', data);
            })
            .catch((error) => {
                console.error('Error:', error);
            });
        widget.style.display = "none";
        post.style.display = "block";
        editBtn.onclick = () => {
            widget.style.display = "block";
            post.style.display = "none";
        }
        setTimeout(() => {
            $('#modalStar').modal('hide');
        }, 1000);
        return false;
    })

    //TODO ENTREGA
    async function deliver(book_id, id_booking, count) {
        try{
            const idBook = book_id;
            const idBooking = id_booking;
            const url = `/api/books/deliver/${idBook}`; 
            let dateActual = new Date();
            dateActual = new Intl.DateTimeFormat("az").format(dateActual).replace("/","-");
            
            Swal.fire({
                title: 'Deliver',
                text: `Do you want to add a review, for the book : ${idBook} ?`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#474E68',
                confirmButtonText: 'Yes',
                cancelButtonText: 'No'
            }).then((result) => {
                if (result.isConfirmed) {
                    $("#id_book").val(idBook);
                    $("#id_booking").val(idBooking);
                    textarea.value = "";
                    widget.style.display = "block";
                    post.style.display = "none";
                    function resetRadioButtons(groupName) {
                        var arRadioBtn = document.getElementsByName(groupName);

                        for (var ii = 0; ii < arRadioBtn.length; ii++) {
                            var radButton = arRadioBtn[ii];
                            radButton.checked = false;
                        }
                    }
                    resetRadioButtons("rate");
                    $('#modalStar').modal({ show: true });
                    document.getElementById(`row${count}`).remove();
                } else {
                    const data = {
                        idBooking,
                        score: 0,
                        review: null,
                        deliver_date_review: dateActual
                    }
                    fetch(url, {
                        method: 'POST',
                        body: JSON.stringify(data),
                        headers: {
                            "Content-Type": "application/json; charset=UTF-8"
                        }
                    })
                        .then((response) => response)
                        .then((data) => {
                            console.log('Success:', data);
                        })
                        .catch((error) => {
                            console.error('Error:', error);
                        });
                    document.getElementById(`row${count}`).remove();
                }
            })
        } catch (error) {
            console.error(":error ", error)
        }
    }

    //TODO RESERVAS ACTIVAS
    async function createdTableActive(){
        setTimeout(async () => {
            spinnerActive.style.display = "none";
            $(document).ready(function () {
                tableA = $("#tablePartnerActive").DataTable({
                    searching: true,
                    ordering: true,
                    info: true,
                    responsive: true,
                    order: [[0, "desc"]],
                    lengthMenu: [[5, 10, 15, 25, 50], [5, 10, 15, 25, 50]],
                    pageLength: 5,
                    retrieve: true
                });
            });
        }, 500)
    }
    async function obtenerPartner(data) {
        const fecha = new Date();
        const actualDate = new Intl.DateTimeFormat("en-US").format(fecha);
        let vacio = Object.keys(data).length === 0;
        let count = 0;
        let body = "";
        data.message ? vacio = true : vacio = false
        tbodyActive.innerHTML = "";;
        if (vacio) {
            body += `<td COLSPAN="5" style="text-align: center; font-weight: bold">No data found</td>`;
        } else {
            infoBloqueActive.classList.remove("isNormal");
            infoBloqueActive.classList.add("isScroll");
            for (let elemento of data) {
                count += 1;
                const reserved = elemento.reserved;
                const idBookingReview = elemento.id_booking_review;
                let reservationDate = new Date(elemento.reservation_date);
                reservationDate = new Intl.DateTimeFormat("en-US").format(reservationDate);
                let deliverDateReview = new Date(elemento.deliver_date_review);
                deliverDateReview = new Intl.DateTimeFormat("en-US").format(deliverDateReview);
                if (reserved === 1 && idBookingReview === null) {
                    body += `<tr id="row${count}" value="row${count}"><td>${elemento.isbn}</td><td>${elemento.title}</td><td>${elemento.author}</td><td>${reservationDate}</td><td><button id="btnDeliver" onClick=deliver(` + elemento.book_id + `,` + elemento.id_booking + `,` + count + `) class="btn btn-warning" title="Deliver Book"><i class="fa-regular fa-handshake"></i> Deliver Book</button></td></tr>`;
                } else {
                    infoBloqueActive.classList.remove("isScroll");
                    infoBloqueActive.classList.add("isNormal");
                }
                setTimeout(async () => {
                    tbodyActive.innerHTML = body;
                }, 400) 
            }
        }
    }
    async function infoPartner(id_partner) {
        spinnerActive.style.display = "block";
        try {
            tableA.destroy();
            createdTableActive();
        } catch (error) {
            createdTableActive();
        }
        const idPartner = id_partner;
        const url = `/api/partners/info/${idPartner}`;
        fetch(url)
            .then(response => response.json())
            .then(data => obtenerPartner(data))
            .catch("No hay datos");
    }

    //TODO HISTORIAL DE RESERVAS
    async function createdTableHistory() {
        setTimeout(async () => {
            $(document).ready(function () {
                spinnerHistory.style.display = "none";
                tableB = $("#tablePartnerHistory").DataTable({
                    searching: true,
                    ordering: true,
                    info: true,
                    responsive: true,
                    order: [[4, "desc"]],
                    lengthMenu: [[5, 10, 15, 25, 50], [5, 10, 15, 25, 50]],
                    pageLength: 5,
                });
            });
        }, 500)
    }
    async function obtenerHistory(data) {
        const fecha = new Date();
        const actualDate = new Intl.DateTimeFormat("en-US").format(fecha);
        let vacio = Object.keys(data).length === 0;

        let count = 0;
        let bodyHistory = "";
        
        data.message ? vacio = true : vacio = false;
        tbodyHistory.innerHTML = "";
        if (vacio) {
            bodyHistory += `<td COLSPAN="7" style="text-align: center; font-weight: bold">No data found</td>`;
        } else {
            infoBloqueHistory.classList.remove("isNormal");
            infoBloqueHistory.classList.add("isScroll");
            for (let elemento of data) {
                count += 1;
                const starTotal = 5;
                const reserved = elemento.reserved;
                const idBookingReview = elemento.id_booking_review;
                const review = elemento.review;
                const score = elemento.score;

                let reservationDate = new Date(elemento.reservation_date);
                reservationDate = new Intl.DateTimeFormat("en-US").format(reservationDate);
                let deliverDateReview = new Date(elemento.deliver_date_review);
                deliverDateReview = new Intl.DateTimeFormat("en-US").format(deliverDateReview);

                const starPercentage = elemento.score / starTotal * 100;
                const starPercentageRounded = `${Math.round(starPercentage / 10) * 10}%`;
                
                if (reserved === 0 || (reserved === 1 && idBookingReview !== null)) {
                    bodyHistory += `<tr  id="row${count}" value="row${count}"><td>${elemento.isbn}</td><td>${elemento.title}</td><td>${elemento.author}</td><td>${reservationDate}</td><td>${deliverDateReview}</td><td><div class="stars-outer"><div class="stars-inner" style="width: ${starPercentageRounded}; cursor: pointer" title="score ${elemento.score}"></div></div></td><td>${elemento.review}</td></tr>`;
                } else {
                    infoBloqueHistory.classList.remove("isScroll");
                    infoBloqueHistory.classList.add("isNormal");
                }
                setTimeout(async ()=> {
                    tbodyHistory.innerHTML = bodyHistory;
                },400)
            }
        }   
    }
    async function infoHistory(id_partner) {
        spinnerHistory.style.display = "block";
        try{
            tableB.destroy();
            createdTableHistory();
        } catch (error) {
            createdTableHistory();
        }
        const idPartner = id_partner;
        const url = `/api/partners/info/${idPartner}`;
        fetch(url)
            .then(response => response.json())
            .then(data => obtenerHistory(data));
    }
    
    //TODO ACTIVAR TAB
    li.forEach((cadaLi, i) => {
        li[i].addEventListener("click", () => {
            li.forEach((cadaLi, i) => {
                // Quitando la clase activo de cada li
                li[i].classList.remove("activo");
                // Quitando la clase activo de cada bloque
                bloque[i].classList.remove("activo");
                //document.getElementById('InfoSubcontenedor').classList.add('isNotActivo')
            });
            // En el li que hemos click le añadimos la clase activo
            li[i].classList.add("activo");
            // En el bloque con la misma posición le añadimos la clase activo
            bloque[i].classList.add("activo");
        });
    });

    let indice = 1;

    function avanzaSlide(n, idPartner) {
        muestraSlides((indice += n));
        try {
            indice === 2 ? 
            infoPartner(idPartner) :
            infoHistory(idPartner)

        } catch (error) {
            console.error(error);
        }
    }

    function muestraSlides(n) {
            let i;
            let slides = document.getElementsByClassName("Info-tab");
            let barras = document.getElementsByClassName("barra");

            if (n > slides.length) {
                indice = 1;
            }
            if (n < 1) {
                indice = slides.length;
            }
            for (i = 0; i < slides.length; i++) {
                slides[i].style.display = "none";
                slides[i].classList.remove("activo");
                bloque[i].classList.remove("activo");
            }
            for (i = 0; i < barras.length; i++) {
                barras[i].className = barras[i].className.replace("active", "");
            }

            slides[indice - 1].style.display = "block";
            slides[indice - 1].classList.add("activo");
            bloque[indice - 1].classList.add("activo");
        }
</script>